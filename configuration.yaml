
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

# Text to speech
tts:
  - platform: google_translate

# Include
group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
camera: !include conf_camera.yaml


wake_on_lan: # enables `wake_on_lan` domain

#mqtt:
 # broker: 127.0.01

# 
#recorder:
#  purge_keep_days: 15
#  db_url: !secret db_url

influxdb:
  api_version: 2
  ssl: false
  host: !secret wb_host
  port: !secret wb_port
  token: !secret influx_token
  organization: !secret influx_org
  bucket: !secret influx_bucket
  tags:
    source: HA
  tags_attributes:
    - friendly_name
  default_measurement: units
  

#Kodi
media_player:
  - platform: kodi
    name: OSMC_3
    host: !secret osmc3_host
    port: !secret osmc3_port
    
    enable_websocket: true
    turn_on_action:
        - service: media_player.kodi_call_method
          data:
            entity_id: media_player.OSMC_3
            method: Addons.ExecuteAddon
            addonid: script.json-cec
            params:
              command: activate
    turn_off_action:
        - service: media_player.media_stop
          data:
            entity_id: media_player.OSMC_3
        - service: media_player.kodi_call_method
          data:
            entity_id: media_player.OSMC_3
            method: Addons.ExecuteAddon
            addonid: script.json-cec
            params:
              command: standby
    
    
# webostv:
#   host: !secret tv_host
#   name: Nappali TV


# ASUS router
#asuswrt:
# host:     !secret router_host
#  username: !secret router_username
#  password: !secret router_password
# sensors:
#    - upload
#    - download
#    - upload_speed
#    - download_speed    
    



template:
#####################
# Garázs
#####################
  - trigger:
    - platform: state
      entity_id:
        - binary_sensor.garage_door_open
        - binary_sensor.garage_door_closed
    sensor:
      - name: 'GarageStatus'
        unique_id: 'Garage_status'
        state: > 
          {% if (trigger.to_state.state == 'on' and trigger.entity_id == 'binary_sensor.garage_door_open') %}
            open
          {% elif (trigger.to_state.state == 'on' and trigger.entity_id == 'binary_sensor.garage_door_closed') %}
            closed
          {% elif (trigger.to_state.state == 'off' and trigger.from_state.state == 'on' and trigger.entity_id == 'binary_sensor.garage_door_open') %}
            closing
          {% elif (trigger.to_state.state == 'off' and trigger.from_state.state == 'on' and trigger.entity_id == 'binary_sensor.garage_door_closed') %}
            opening
          {% else %}
            open
          {% endif %}
    
#####################
# Kapu
#####################
  - trigger:
    - platform: state
      entity_id:
        - binary_sensor.gate_open
        - binary_sensor.gate_closed
    sensor:
      - name: 'GateStatus'
        unique_id: 'Gate_status'
        state: > 
          {% if (trigger.to_state.state == 'on' and trigger.entity_id == 'binary_sensor.gate_open') %}
            open
          {% elif (trigger.to_state.state == 'on' and trigger.entity_id == 'binary_sensor.gate_closed') %}
            closed
          {% elif (trigger.to_state.state == 'off' and trigger.from_state.state == 'on' and trigger.entity_id == 'binary_sensor.gate_open') %}
            closing
          {% elif (trigger.to_state.state == 'off' and trigger.from_state.state == 'on' and trigger.entity_id == 'binary_sensor.gate_closed') %}
            opening
          {% else %}
            open
          {% endif %}
          
          
#####################
# Fogyaztás mérő(k)
#####################

  - sensor:
      - unique_id: power_cons_boldi
        attributes:
            friendly_name: "Boldi gépe in kWh"
        icon: mdi:transmission-tower-export
        unit_of_measurement: "kWh"
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.smart_plug_teljesitmeny')|float(0) }}"
        availability: "{{ states('sensor.smart_plug_teljesitmeny')|is_number }}"
        
        
      - unique_id: solar_days_since_installation
        attributes:
            friendly_name: "Telepítés óta eltelt napok"
        unit_of_measurement: 'Nap'
        state: "{{ ((as_timestamp(now()) - as_timestamp('2023-08-02 00:00:00')) | int /60/1440) | round(0) }}"
        
        
      - unique_id: solar_average_daily_production
        attributes:
          friendly_name: Napi átlag termelés
        unit_of_measurement: 'kWh'
        state: >
            {{ (states('sensor.solaredge_ac_energy_kwh') | float  / 1000 /
            states('sensor.template_solar_days_since_installation') | int ) | float(1) | round(2) }}
        
        
      - unique_id: energy_average_daily_consumption
        attributes:
          friendly_name: "Napi átlag fogyasztás"
        unit_of_measurement: 'kWh'
        state: >
            {{ ( (states('sensor.w1000_import') | float - 
            states('sensor.w1000_export') | float  + 
            states('sensor.solaredge_ac_energy_kwh') | float  / 1000 ) /
            states('sensor.template_solar_days_since_installation') | int ) | float(1) | round(2) }}
        
        
      - unique_id: return_of_investment
        attributes:
          friendly_name: Várható megtérülés
        unit_of_measurement: 'év'
        state: >
            {% set return = 0 %}
            {% if (states('sensor.template_energy_average_daily_consumption') != 'unknown' and states('sensor.template_solar_average_daily_production') != 'unknown') %}
                {% set yearly_cons = states('sensor.template_energy_average_daily_consumption') | float  * 365 %}
                {% set yearly_prod = states('sensor.template_solar_average_daily_production') | float  * 365 %}
                {% set discount_price = 36  %}
                {% set market_price = 70.1  %}
                {% set yearly_limit = 2523 %}
                {% set solar_cost = 3520000 %}
                {% if (yearly_cons < yearly_limit) %}
                   {% set costs_wo_solar = ( yearly_cons * discount_price ) %}
                {% else %}
                   {% set costs_wo_solar = ( yearly_limit * discount_price + ( yearly_cons - yearly_limit ) * market_price ) %}
                {% endif %}
                {% if (yearly_cons - yearly_prod < yearly_limit) %}
                   {% set costs_with_solar = ( yearly_cons - yearly_prod ) * discount_price %}
                {% else %}
                   {% set costs_with_solar = yearly_limit * discount_price + ( yearly_cons - yearly_prod - yearly_limit ) * market_price %}
                {% endif %}
                {% set return = solar_cost / ( costs_wo_solar - costs_with_solar ) %}
            {% endif %}
            {{ return | float(0) | round(1) }}
        



cover:

#####################
# Garázs
#####################
  - platform: template
    covers:
      garage_door_esp:
        friendly_name: Garage Door
        value_template: '{{ (states.sensor.garagestatus.state) }}'
        open_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_door_trigger
        close_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_door_trigger
        stop_cover:
          service: switch.turn_on
          data:
            entity_id: switch.garage_door_trigger
            
#####################
# Kapu
#####################
  - platform: template
    covers:
      gate_esp:
        friendly_name: Gate
        value_template: '{{ (states.sensor.gatestatus.state) }}'
        open_cover:
          service: switch.turn_on
          data:
            entity_id: switch.gate_trigger
        close_cover:
          service: switch.turn_on
          data:
            entity_id: switch.gate_trigger
        stop_cover:
          service: switch.turn_on
          data:
            entity_id: switch.gate_trigger
scrape:
    # Duna vízállás és vízhőfok
  - resource: https://www.vizugy.hu/?AllomasVOA=AD95AE19-EA8E-40B0-9C1C-2F82ACBEABD5&mapData=Idosor#mapData
    # Request every hour
    scan_interval: 3600
    sensor:
      - name: Göd Duna vízállás
        select: ".vizmercelista  tr  td strong"
        index: 1
        unit_of_measurement: 'cm'
      - name: Göd Duna vízhőfok
        select: ".vizmercelista  tr  td"
        index: 3
        unit_of_measurement: 'C°'

mqtt:
  #broker: 127.0.0.1
  sensor:
  #- platform: mqtt
    name: "osps_temp"
    #friendly_name : "Kinti hőmérséklet"
    state_topic: "OsPs1/telemetry"
    unit_of_measurement: '°C'
    value_template: "{{ value_json.temperature}}"
    
# Kazán melegvíz keringető időtartam tároló (felülethez és esphome-hoz)
input_number:
  pump_duration:
    name: "Keringető időtartam"
    initial: 10
    min: 0
    max: 30
    step: 1

# Kazán melegvíz keringető indítási időpontok tároló (felülethez és esphome-hoz)
input_text:
  pump_times:
    name: "Keringető időpontok (pl.: 19:00,20:00)"
    


w1000-energy-monitor:
  login_user: !secret w1000-email-address
  login_pass: !secret w1000-password
  url: https://energia.eon-hungaria.hu/W1000
  reports: import,export